name: deploy-service

on:
  push:
    branches: [ master, dev ]

jobs:
  deploy-service:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['14.6']
    
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: Check Node Version
      run: node -v
    # - name: Install Dependencies # We dont need this since Dockerfile also runs npm install
    #   run: npm ci
    - name: Get short SHA
      id: slug
      run: echo "::set-output name=sha8::$(echo ${GITHUB_SHA} | cut -c1-8)"
  
    - name: Prepare Nodejs Application
      run: |
        cp .env.ci .env
        
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}


    - name: Set outputs
      id: vars
      run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
    - name: Check outputs
      run: echo ${{ steps.vars.outputs.sha_short }}


    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
          push: true
          tags: thebolarin/blog-svc:${{ steps.vars.outputs.sha_short }} 
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}
  
    - name: AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:  ${{ secrets.AWS_REGION }}
    - name: helm deploy
      uses: koslib/helm-eks-action@master
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
      with:
        command: helm install blog-svc --install --wait --set image.tag=${{ steps.vars.outputs.sha_short }} devops/k8s/blog-svc -f devops/k8s/blog-svc/values/dev.values.yaml -n dev
